{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"FTC Single Button Actions","text":"<p>Use the SAME code for repeated actions between your TeleOp and Autonomous.</p>"},{"location":"#what-is-it","title":"What is it?","text":"<p>FTC Single Button Actions (SBA's) is a framework designed to execute several tasks on your robot sequentially, with minimal code complexity.</p> <p>SBA's helped us, FTC Bruinbots #13599, to win 1st place Control Award twice in a row in the 2024-2025 Into the Deep season.</p>"},{"location":"#how-does-it-work","title":"How does it work?","text":"<p>FTC SBA's work by breaking down complex motion sequences into frozen snapshots, called frames. Think of this like a stop-motion recording of your robot, except intead of being stuck on a screen, this recording can happen in reality.</p> <p>First, you break your sequence down into steps. For example, to pick up something from the ground with a claw, you'll need to:</p> <ol> <li>Open claw</li> <li>Lower arm</li> <li>Close claw</li> <li>Lift arm</li> </ol> <p>These can be represented as motor and servo movements (positions are for illustration purposes only):</p> <ol> <li>Move <code>clawServo</code> to position <code>1</code></li> <li>Move <code>armMotor</code> to position <code>500</code></li> <li>Move <code>clawServo</code> to position <code>0.5</code></li> <li>Move <code>armMotor</code> to position <code>1000</code></li> </ol> <p>These can then be translated into SBA's (more on that later).</p> <p>Now, to actually run these SBA's, the actions are simply played back, with each action waiting for the previous one to finish before starting itself.</p>"},{"location":"#installation","title":"Installation","text":"<ol> <li>Download this repository as a zip.</li> <li>Extract the zip file to a folder.</li> <li>Copy the <code>SBAs</code> and <code>Utils</code> folder to your <code>TeamCode</code> folder.</li> </ol>"},{"location":"#tutorial","title":"Tutorial","text":"<p> Tutorial</p>"},{"location":"tutorial/buildingfirst/","title":"Building Your First SBA","text":"<p>Now that you know how SBA's work, it's time to create your own!</p> <p>On our robot, we used SBA's to curl and uncurl our arm, which required several coordinated motions of both our arm and wrist to prevent damaging our robot.</p> <p>For this example, we'll create a simpler SBA sequence for a simpler arm.</p> <p></p> <p>This arm has only one motor to move the arm, and one servo to open or close the claw.</p>"},{"location":"tutorial/buildingfirst/#perform-the-motion-in-real-life","title":"Perform the Motion in Real Life","text":"<p>First, we need to perform the motion in real life. To do this, you'll need to add telemetry to your OpMode so we can gather positioning data.</p> <p>Here's an example for the arm motor and claw servo:</p> <pre><code>@TeleOp(name=\"Main TeleOp\")\npublic class MainTeleOp extends OpMode {\n    ...\n    @Override\n    public void loop() {\n        ...\n\n        telemetry.addData(\"armMotor\", armMotor.getCurrentPosition()+\"=&gt;\"+armMotor.getTargetPosition());\n        telemetry.addData(\"clawServo\", clawServo.getPosition());\n        telemetry.update();\n    }\n}\n</code></pre> <p>Now, using your existing controls, move the arm to the starting position, like in the above diagram.</p> <p>Your telemetry should look something like this:</p> <pre><code>armMotor: 101=&gt;100\nclawServo: 1\n</code></pre> <p>In this case, that means that the starting position is:</p> <ol> <li><code>armMotor</code> at <code>100</code></li> <li><code>clawServo</code> at <code>1</code></li> </ol> <p>Now, continue with the motion. In this case, the next step is to move the arm down.</p> <p></p> <p>Check your telemetry.</p> <pre><code>armMotor: 199=&gt;200\nclawServo: 1\n</code></pre> <p>The next step of our motion is:</p> <ol> <li><code>armMotor</code> to <code>200</code></li> </ol> <p>The next step is to close the claw.</p> <p></p> <p>Telemetry:</p> <pre><code>armMotor: 199=&gt;200\nclawServo: 0.5\n</code></pre> <p>The motion is:</p> <ol> <li><code>clawServo</code> to <code>0.5</code></li> </ol> <p>Finally, we have to lift our arm back up to its starting position.</p> <p></p> <p>Telemetry:</p> <pre><code>armMotor: 99=&gt;100\nclawServo: 0.5\n</code></pre> <p>The motion is:</p> <ol> <li><code>armMotor</code> to <code>100</code></li> </ol> <p>Now we that we recorded the motion in real life, it's time to turn it into code!</p>"},{"location":"tutorial/buildingfirst/#converting-to-sbas","title":"Converting to SBA's","text":"<p>In the previous section, we recorded the motion of the robot in real life. Now, we have to convert it to SBA's.</p> <p>First, create a table like this:</p> Step <code>armMotor</code> <code>clawServo</code> Start 100 1 Lower Arm 200 Close Claw 0.5 Lift Arm 100 <p>Any blanks in the table represent no change from the previous step.</p> <p>Now, we'll go through each row and convert it to SBA's:</p> Step <code>armMotor</code> <code>clawServo</code> SBA Start 100 1 <code>new MotorSBA(armMotor, 0.5, 100)</code><code>new ServoSBA(clawServo, 1)</code> Lower Arm 200 <code>new MotorSBA(armMotor, 0.5, 200)</code> Close Claw 0.5 <code>new ServoSBA(clawServo, 0.5)</code> Lift Arm 100 <code>new MotorSBA(armMotor, 0.5, 100)</code> <p>For our arm power, we're using <code>0.5</code>.</p> <p>Finally, put these together in a list, and pass it to <code>runSBAs()</code></p> <pre><code>// Modified from https://3dcoded.github.io/FTC-Single-Button-Actions/tutorial/howitworks/#__codelineno-10-18\nrunner.runSBAs(\n    new MotorSBA(armMotor, 0.5, 100), // Starting arm\n    new ServoSBA(clawServo, 1), // Starting claw\n    new MotorSBA(armMotor, 0.5, 200), // Lower arm\n    new ServoSBA(clawServo, 0.5), // Close claw\n    new MotorSBA(armMotor, 0.5, 100) // Lift arm\n);\n</code></pre> <p>You can attach this to a button on your controller, and...</p> <p></p> <p>It went through the motions, but the arm came up before the claw had a chance to close!</p>"},{"location":"tutorial/buildingfirst/#waiting","title":"Waiting","text":"<p>Here's the issue: We command the claw to close (move to <code>0.5</code>), but have no way of knowing when the claw actually finishes closing. To work around this, we need to add a wait after we close the claw. Luckly, we have a prebuilt <code>WaitSBA</code> ready to go!</p> <pre><code>// Modified from https://3dcoded.github.io/FTC-Single-Button-Actions/tutorial/howitworks/#__codelineno-10-18\nrunner.runSBAs(\n    new MotorSBA(armMotor, 0.5, 100),\n    new ServoSBA(clawServo, 1),\n    new MotorSBA(armMotor, 0.5, 200),\n    new ServoSBA(clawServo, 0.5), // Close claw\n    new WaitSBA(500), // &lt;-- Give the claw 500ms to close\n    new MotorSBA(armMotor, 0.5, 100)\n);\n</code></pre>"},{"location":"tutorial/howitworks/","title":"How it Works (in detail)","text":"<p>On the homepage, a brief explanation of how SBA's work was given. Here, a deeper and more technical explanation will be given.</p> <p>Don't be intimidated by the length of this page! There's a lot of useful information here that will help you debug and optimize your SBA's</p>"},{"location":"tutorial/howitworks/#the-sba-interface","title":"The <code>SBA</code> Interface","text":"<p>All SBA actions are their own class, implementing the <code>SBA</code> interface below:</p> <pre><code>public interface SBA {\n    boolean sanity();\n    void init();\n    void loop();\n    boolean isBusy();\n}\n</code></pre> <p>It has four functions: <code>sanity()</code>, <code>init()</code>, <code>loop()</code>, and <code>isBusy()</code>.</p> <p>Firstly, the <code>sanity()</code> function is run as a safety feature. If <code>sanity()</code> returns <code>false</code>, the entire SBA is aborted. You can use <code>sanity()</code> to make sure your robot doesn't break in the middle of SBA.</p> <p>Next, the <code>init()</code> function is run. This is where you set up your SBA.</p> <p>Then, the <code>loop()</code> function is run. This is repeated until <code>isBusy()</code> returns <code>false</code>, when your SBA completes (e.g. your motor encoder position hits your target position (1)).</p> <ol> <li>You shouldn't wait until your encoder position is equal to your target position, as this will make your motor move back and forth almost indefinitely, freezing your robot. Instead, you can calculate the difference from your current position to the target position, then check if it is below a certain tolerance value. <pre><code>return Math.abs(curPos - targetPos) &gt; tolerance;\n</code></pre></li> </ol>"},{"location":"tutorial/howitworks/#prebuilt-sbas","title":"Prebuilt SBA's","text":"<p>While you can jump right in and create your own class implementing the <code>SBA</code> interface, you might want to start with a pre-built SBA to learn how to use SBA's.</p> <p>Here are the built-in SBA's.</p>"},{"location":"tutorial/howitworks/#motorsba","title":"MotorSBA","text":"<p>This will drive a <code>DcMotorEx</code> to a target position using an encoder. It has the following required parameters:</p> <ul> <li><code>DcMotorEx motor</code> The motor to drive</li> <li><code>double power</code> The power to drive the motor with</li> <li><code>int targetPos</code> The target position to drive the motor to</li> </ul> <p>and optional parameters:</p> <ul> <li><code>int tolerance</code> The tolerance to drive the motor to the target position with</li> <li><code>int minPos</code> The minimum position the encoder may be at for <code>sanity()</code> to pass. Ignored if not set.</li> <li><code>int maxPos</code> The maximum position the encoder may be at for <code>sanity()</code> to pass. Ignored if not set.</li> </ul> <p>Usage example:</p> <pre><code>// Move arm to position 1000 with power 0.5\nnew MotorSBA(armMotor,  0.5,     1000);\n//           Motor      Power     Target\n\n// Move linear slide to position 2000 with\n// power 0.6, but only if it is currently\n// between position 1000 and 1500.\nnew MotorSBA(slideMotor, 0.6,   2000,   1000,           1500);\n//           Motor       Power  Target  Minimum Start   Maximum Start\n</code></pre>"},{"location":"tutorial/howitworks/#servosba","title":"ServoSBA","text":"<p>This will drive a <code>Servo</code> to a target position. It has the following required parameters:</p> <ul> <li><code>Servo servo</code> The servo to drive</li> <li><code>double targetPos</code> The target position to drive the servo to</li> </ul> <p>Usage example:</p> <pre><code>// Move claw servo to position 0.85\nnew ServoSBA(clawServo, 0.85);\n//           Servo      Target\n</code></pre>"},{"location":"tutorial/howitworks/#waitsba","title":"WaitSBA","text":"<p>This will wait a given number of milliseconds (1).</p> <ol> <li><code>WaitSBA</code> is legal in FTC, as it doesn't use <code>sleep()</code>. If your OpMode uses <code>sleep()</code>, stopping won't work and you won't pass the robot inspection.</li> </ol> <p>It takes in one required parameter:</p> <ul> <li><code>double waitMs</code> The number of milliseconds to wait for</li> </ul> <p>Usage example:</p> <pre><code>// Wait for 500ms (.5s)\nnew WaitSBA(500);\n//          Milliseconds\n</code></pre>"},{"location":"tutorial/howitworks/#running-sbas","title":"Running SBA's","text":"<p>Now that you understand the basics of how SBA's work, it's time to learn how to actually run one!</p>"},{"location":"tutorial/howitworks/#the-sbarunner","title":"The SBARunner","text":"<p>Running a SBA is controlled by the <code>SBARunner</code> class. To run an SBA, you create an instance of the <code>SBARunner</code> class, and use the <code>runSBAs()</code> function.</p> <p>Example:</p> <pre><code>// Create the runner\nSBARunner runner = new SBARunner();\n\n// Create our SBA\nMotorSBA sba = new MotorSBA(armMotor, 0.5, 1000);\n\n// Run the SBA\nrunner.runSBAs(sba);\n</code></pre> <p>It's that simple...almost.</p>"},{"location":"tutorial/howitworks/#mainloop","title":"Mainloop","text":"<p>We've told the <code>SBARunner</code> what SBA to run, but we haven't told it to run it yet. To run it, you'll need to use the <code>loop()</code> function. You can place this in the loop of your TeleOp OpMode, in a state machine loop, or simply in a while loop in autonomous. </p> <p>Example for TeleOp.</p> <pre><code>@TeleOp(name=\"MyTeleOp\")\npublic class MyTeleOp extends OpMode {\n    // Variables, initialization, etc.\n    @Override\n    public void loop() {\n        // Controller handling, telemetry, etc.\n\n        // Run the SBARunner loop\n        runner.loop();\n    }\n}\n</code></pre>"},{"location":"tutorial/howitworks/#multiple-sbas","title":"Multiple SBA's","text":"<p>Now, like the name suggests, <code>runSBAs()</code> isn't limited just to a single SBA. You can pass in any number of SBA's to <code>runSBAs()</code>, and it will execute each one sequentially.</p> <p>Example:</p> <pre><code>// Create the runner\nSBARunner runner = new SBARunner();\n\n// Create our SBA's\nMotorSBA sba1 = new MotorSBA(armMotor, 0.5, 1000);\nServoSBA sba2 = new ServoSBA(clawServo, 0.85);\n\n// Run the SBA's\nrunner.runSBAs(sba1, sba2);\n</code></pre> <p>We can also create our SBA's inline. Example:</p> <pre><code>// Create the runner\nSBARunner runner = new SBARunner();\n\n// Run the SBA's\nrunner.runSBAs(\n    new MotorSBA(armMotor, 0.5, 1000),\n    new ServoSBA(clawServo, 0.85)\n);\n</code></pre>"},{"location":"tutorial/howitworks/#aborting-an-sba","title":"Aborting an SBA","text":"<p>If an SBA goes wrong, you can use <code>runner.stop()</code>. An example is provided in the TeleOp sample below.</p> <p>Motors and Encoders</p> <p>If you abort an SBA that uses motors, the motors will still try to run to their target positions. To stop this, you can set the target position of each motor to its current position, and set its power to zero.</p> <pre><code>// Abort our SBA's\nrunner.stop();\n\n// Stop moving our arm motor by setting its\n// target position to its current position\narmMotor.setTargetPosition(armMotor.getCurrentPosition());\n\n// Set arm power to 0\narmMotor.setPower(0);\n</code></pre>"},{"location":"tutorial/howitworks/#sample-teleop","title":"Sample TeleOp","text":"Sample TeleOp <pre><code>@TeleOp(name=\"MyTeleOp\")\npublic class MyTeleOp extends OpMode {\n    private DcMotorEx armMotor;\n    private Servo clawServo;\n    private SBARunner runner;\n\n    @Override\n    public void init() {\n        armMotor = hardwareMap.get(DcMotorEx.class, \"armMotor\");\n        clawServo = hardwareMap.get(Servo.class, \"clawServo\");\n        runner = new SBARunner();\n    }\n\n    @Override\n    public void loop() {\n        if (gamepad1.a) {\n            // If A is pressed, run our SBA's\n            runner.runSBAs(\n                new MotorSBA(armMotor, 0.5, 1000),\n                new ServoSBA(clawServo, 0.85)\n            );\n        } else if (gamepad1.b) {\n            // If B is pressed, abort our SBA's\n            runner.stop();\n\n            // Stop moving our arm motor by setting its\n            // target position to its current position\n            armMotor.setTargetPosition(armMotor.getCurrentPosition());\n\n            // Set arm power to 0\n            armMotor.setPower(0);\n        }\n\n        // Run the SBARunner loop\n        runner.loop();\n    }\n}\n</code></pre>"},{"location":"tutorial/scripts/","title":"Using Scripts","text":"<p>By now you know how to define an SBA sequence. In the last example, we created a sequence to pick up an item from the floor.</p> <p>Here's what that code looked like:</p> <pre><code>runner.runSBAs(\n    new MotorSBA(armMotor, 0.5, 100),\n    new ServoSBA(clawServo, 1),\n    new MotorSBA(armMotor, 0.5, 200),\n    new ServoSBA(clawServo, 0.5),\n    new WaitSBA(500),\n    new MotorSBA(armMotor, 0.5, 100)\n);\n</code></pre> <p>However, this SBA framework has its own scripting language. Read on to learn how to use it.</p>"},{"location":"tutorial/scripts/#what-is-a-scripting-language","title":"What is a Scripting Language?","text":"<p>A scripting language is essentially a simplified programming language. This also means the syntax and logic are similar. Scripting languages are good for focused languages, like with SBA's.</p>"},{"location":"tutorial/scripts/#the-sba-scripting-language","title":"The SBA Scripting Language","text":"<p>The SBA Scripting language (SBASL) syntax is structured like below:</p> <pre><code>COMMAND param1 param2 param3 etc\n</code></pre> <p>Each line consists of a command, then parameters, each separated by spaces.</p> <p>Here are the supported commands:</p> <pre><code>MOTOR &lt;motor&gt; &lt;power&gt; &lt;target&gt;\nMOTOR &lt;motor&gt; &lt;target&gt;\nSERVO &lt;servo&gt; &lt;target&gt;\nWAIT &lt;ms&gt;\n</code></pre> <p>Here's the sequence from the last example in SBASL:</p> <pre><code>MOTOR armMotor 0.5 100\nSERVO clawServo 1\nMOTOR armMotor 0.5 200\nSERVO clawServo 0.5\nWAIT 500\nMOTOR armMotor 0.5 100\n</code></pre> <p>This is a lot simpler than the Java version!</p>"},{"location":"tutorial/scripts/#the-sbalexer","title":"The SBALexer","text":"<p>Now, to run the script we just created, we'll need a <code>SBALexer</code>. </p> <p>Let's modify the sample TeleOp from How it Works:</p> <pre><code>@TeleOp(name=\"MyTeleOp\")\npublic class MyTeleOp extends OpMode {\n    private DcMotorEx armMotor;\n    private Servo clawServo;\n    private SBALexer lexer;\n\n    @Override\n    public void init() {\n        armMotor = hardwareMap.get(DcMotorEx.class, \"armMotor\");\n        clawServo = hardwareMap.get(Servo.class, \"clawServo\");\n        lexer = new SBALexer();\n    }\n\n    @Override\n    public void loop() {\n        if (gamepad1.a) {\n            // If A is pressed, run our SBA script\n            lexer.runScript(\"MOTOR armMotor 0.5 100\\n\" +  \n            \"SERVO clawServo 1\\n\" + \n            \"MOTOR armMotor 0.5 200\\n\" + \n            \"SERVO clawServo 0.5\\n\" + \n            \"WAIT 500\\n\" + \n            \"MOTOR armMotor 0.5 100\");\n        } else if (gamepad1.b) {\n            // If B is pressed, abort our SBA's\n            lexer.stop();\n\n            // Stop moving our arm motor by setting its\n            // target position to its current position\n            armMotor.setTargetPosition(armMotor.getCurrentPosition());\n\n            // Set arm power to 0\n            armMotor.setPower(0);\n        }\n\n        // Run the SBALexer loop\n        lexer.loop();\n    }\n}\n</code></pre>"},{"location":"tutorial/scripts/#motors-and-servos","title":"Motors and Servos","text":"<p>To change which motors and servos are included in the <code>SBALexer</code>, you'll need to modify the initializer in <code>SBALexer.java</code>. </p> SBALexer.java<pre><code>public class SBALexer {\n    ...\n    public SBALexer() {\n        runner = new SBARunner();\n\n        // Populate motor dictionary\n        motorMap.put(\"armMotor\", bot.armMotor);\n        // TODO: Figure out how to handle two motors at once (maybe a 2MOTOR operation)\n\n        // Default motor powers\n        motorPowers.put(\"armMotor\", 0.5);\n\n        // Populate servo dictionary\n        servoMap.put(\"clawServo\", bot.clawServo);\n        ...\n    }\n    ...\n}\n</code></pre> <p>The highlighted lines indicate where motors and servos are setup with the <code>SBALexer</code>. Say you have a linear slide on your robot, and you want to use it with <code>SBALexer</code>. </p> <p>Assuming it's declared as <code>bot.slideMotor</code>, you can add this line to the initializer:</p> SBALexer.java<pre><code>motorMap.put(\"slideMotor\", bot.slideMotor);\n</code></pre> <p>You can also specifiy a default power to run the motor with.</p> SBALexer.java<pre><code>motorPowers.put(\"slideMotor\", 0.5);\n</code></pre> <p>Similarly, you can add a new servo <code>bot.wristServo</code> with:</p> SBALexer.java<pre><code>servoMap.put(\"wristServo\", bot.wristServo);\n</code></pre>"},{"location":"tutorial/scripts/#constants","title":"Constants","text":"<p>You can also make use of constants in <code>SBALexer</code>. Also setup in the initializer, you can use constants in place of numbers anywhere in a SBA script.</p> SBALexer.java<pre><code>public class SBALexer {\n    ...\n    public SBALexer() {\n        ...\n        // Populate constants\n        constants.put(\"clawOpenPos\", 1);\n        constants.put(\"clawClosePos\", 0.5);\n        constants.put(\"armUpPos\", 100);\n        constants.put(\"armDownPos\", 200);\n        ...\n    }\n    ...\n}\n</code></pre> <p>You can use these constants in your SBA scripts like in this example that will open the claw:</p> <pre><code>SERVO clawServo clawOpenPos\n</code></pre> <p>Using constants, we can refactor our existing SBA script routine to use constants:</p> <pre><code>MOTOR armMotor armUpPos\nSERVO clawServo clawOpenPos\nMOTOR armMotor armDownPos\nSERVO clawServo clawClosePos\nWAIT 500\nMOTOR armMotor armUpPos\n</code></pre>"},{"location":"tutorial/scripts/#using-the-dashboard","title":"Using the Dashboard","text":"<p>Here's where the real advantage of using SBASL comes in. If you use FTC Dashboard, you can edit static variables in the browser, and view their results live without changing code and restarting the robot. This is a huge timesaver during testing.</p> <p>To make use of the FTC Dashboard with SBASL, let's modify our TeleOp:</p> <pre><code>@Config\n@TeleOp(name=\"MyTeleOp\")\npublic class MyTeleOp extends OpMode {\n    ...\n    public static String script = \"\";\n    ...\n\n    @Override\n    public void loop() {\n        if (gamepad1.a) {\n            // If A is pressed, run our SBA script\n            lexer.runScript(script);\n        }\n        ...\n    }\n}\n</code></pre> <p>Now you can edit your script from the browser! </p>"},{"location":"tutorial/scripts/#newlines-in-the-dashboard","title":"Newlines in the Dashboard","text":"<p>Unfortunately, you can't enter multiline strings on the FTC Dashboard. To work around this, you can use a substitute newline, like <code>\"/\"</code>. To implement, simply modify one line in your OpMode:</p> <pre><code>lexer.runScript(script.replace(\"/\", \"\\n\"));\n</code></pre>"},{"location":"tutorial/toc/","title":"Table of Contents","text":"<p>Please read and perform each of these steps carefully!</p> <p> How it works (in detail)</p> <p> Building your first SBA</p> <p> Using scripts</p>"}]}