{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"FTC Single Button Actions","text":"<p>Use the SAME code for repeated actions between your TeleOp and Autonomous.</p>"},{"location":"#what-is-it","title":"What is it?","text":"<p>FTC Single Button Actions (SBA's) is a framework designed to execute several tasks on your robot sequentially, with minimal effort.</p> <p>...</p>"},{"location":"#how-does-it-work","title":"How does it work?","text":"<p>FTC SBA's work by breaking down complex motion sequences into frozen snapshots, called frames. Think of this like a stop-motion recording of your robot, except intead of being stuck on a screen, this recording can happen in reality.</p> <p>First, you break your sequence down into steps. For example, to pick up something from the ground with a claw, you'll need to:</p> <ol> <li>Open claw</li> <li>Lower arm</li> <li>Close claw</li> <li>Lift arm</li> </ol> <p>These can be represented as motor and servo movements (positions are for illustration purposes only):</p> <ol> <li>Move <code>clawServo</code> to position <code>1</code></li> <li>Move <code>armMotor</code> to position <code>500</code></li> <li>Move <code>clawServo</code> to position <code>0.5</code></li> <li>Move <code>armMotor</code> to position <code>1000</code></li> </ol> <p>These can then be translated into SBA's (more on that later).</p> <p>Now, to actually run these SBA's, the actions are simply played back, with each action waiting for the previous one to finish before starting itself.</p>"},{"location":"#installation","title":"Installation","text":"<p>...</p>"},{"location":"#tutorial","title":"Tutorial","text":"<p> Tutorial</p>"},{"location":"tutorial/howitworks/","title":"How it Works (in detail)","text":"<p>On the homepage, a brief explanation of how SBA's work was given. Here, a deeper and more technical explanation will be given.</p> <p>Don't be intimidated by the length of this page! There's a lot of useful information here that will help you debug and optimize your SBA's</p>"},{"location":"tutorial/howitworks/#the-sba-interface","title":"The <code>SBA</code> Interface","text":"<p>All SBA actions are their own class, implementing the <code>SBA</code> interface below:</p> <pre><code>public interface SBA {\n    boolean run();\n    boolean sanity();\n}\n</code></pre> <p>It's super simple! It only has two functions: <code>run()</code> and <code>sanity()</code>. </p> <p>Firstly, the <code>sanity()</code> function is run before <code>run()</code>. This is a safety feature. If <code>sanity()</code> returns <code>false</code>, the entire SBA is aborted. You can use <code>sanity()</code> to make sure your robot doesn't break in the middle of SBA.</p> <p>Next, the <code>run()</code> function is run. <code>run()</code> is where your SBA actaually happens. For example, if you're running a motor, <code>run()</code> is where you set power, mode, and target position. <code>run()</code> will return <code>false</code> while its running. Once your SBA finishes running (e.g. your motor encoder position hits your target position (1)).</p> <ol> <li>You shouldn't wait until your encoder position is equal to your target position, as this will make your motor move back and forth almost indefinitely, freezing your robot. Instead, you can calculate the difference from your current position to the target position, then check if it is below a certain tolerance value. <pre><code>return Math.abs(curPos - targetPos) &lt;= tolerance;\n</code></pre></li> </ol>"},{"location":"tutorial/howitworks/#prebuilt-sbas","title":"Prebuilt SBA's","text":"<p>While you can jump right in and create your own class implementing the <code>SBA</code> interface, you might want to start with a pre-built SBA to learn how to use SBA's.</p> <p>Here are the built-in SBA's.</p>"},{"location":"tutorial/howitworks/#motorsba","title":"MotorSBA","text":"<p>This will drive a <code>DcMotorEx</code> to a target position using an encoder. It has the following required parameters:</p> <ul> <li><code>DcMotorEx motor</code> The motor to drive</li> <li><code>double power</code> The power to drive the motor with</li> <li><code>int targetPos</code> The target position to drive the motor to</li> </ul> <p>and optional parameters:</p> <ul> <li><code>int tolerance</code> The tolerance to drive the motor to the target position with</li> <li><code>boolean useBounds</code> Whether or not to use min/max position sanity checks</li> <li><code>int minPos</code> The minimum position the encoder may be at for <code>sanity()</code> to pass. Ignored if <code>useBounds</code> is set to <code>false</code>.</li> <li><code>int maxPos</code> The maximum position the encoder may be at for <code>sanity()</code> to pass. Ignored if <code>useBounds</code> is set to <code>false</code>.</li> </ul>"},{"location":"tutorial/howitworks/#servosba","title":"ServoSBA","text":"<p>...</p>"},{"location":"tutorial/howitworks/#waitsba","title":"WaitSBA","text":"<p>...</p>"},{"location":"tutorial/toc/","title":"Table of Contents","text":"<p>Please read and perform each of these steps carefully!</p> <ol> <li>How it works (in detail)</li> <li>Building your first SBA</li> <li>Adding to your OpMode</li> <li>Using scripts</li> </ol>"}]}